{% comment %} <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.0/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.0/ScrollTrigger.js"></script> {% endcomment %}

<script src="https://underdogsitalia.com/wp-content/themes/underdogs/js/libraries.js?ver=20151215"></script>
<script src="https://unpkg.co/gsap@3/dist/gsap.min.js"></script>
<script src="https://unpkg.com/gsap@3/dist/ScrollTrigger.min.js"></script>
<script src="https://codepen.io/GreenSock/pen/vYbbEMa.js"></script>

<div class="canvas-container">
  <!-- <canvas id="hero-lightpass"></canvas> -->
  <canvas id="image-sequence" width="1778" height="1080" />
</div>

<div class="title">
  <h2>Treat your senses to the sweet aroma, the spiced flavour and the warm textures of a Mulled Beverage. Experience this delicious drink with friends or family today.</h2>
  <div class="product-option">
    <img src="https://cdn.shopify.com/s/files/1/0659/6080/4509/files/Simple_Doypack_Mockup_1.png" width="auto" height="auto">
    <img src="https://cdn.shopify.com/s/files/1/0659/6080/4509/files/Simple_Doypack_Mockup_2.png" width="auto" height="auto">
  </div>
  <button class="btn-mulled">Shop</button>
</div>
<style>
  .title {
    position: absolute;
    top: 40vh;
    left: 28vw;
    transform: translate(-50%, -50%);
    transition: opacity 2s;
  }


  .title h2 {
    color: #fff;
    margin: 0;
    font-family: Lancelot,sans-serif;
    font-size: 35px;
    max-width: 614px;
  }

  .canvas-container {
      height: 300vh;
      background: #000;
      margin: 0;
  }

  canvas {
      position: fixed;
      width: 100%;
      height: 100vh;
      object-fit: fill;
  }
</style>

<script>
    // console.clear();

    // const canvas = document.getElementById("hero-lightpass");
    // const context = canvas.getContext("2d");

    // canvas.width = 1778;
    // canvas.height = 1080;
    // const frameCount = 88;
    // const currentFrame = index => (
    //     `https://cdn.shopify.com/s/files/1/0659/6080/4509/files/${(index + 1).toString().padStart(4, '0')}.png`
    // );

    // const images = []
    // const airpods = {
    //     frame: 0
    // };

    // for (let i = 0; i < frameCount; i++) {
    //     const img = new Image();
    //     img.src = currentFrame(i);
    //     images.push(img);
    // }

    // gsap.to(airpods, {
    //     frame: frameCount - 1,
    //     snap: "frame",
    //     ease: "none",
    //     scrollTrigger: {
    //         scrub: 0.5
    //     },
    //     onUpdate: render // use animation onUpdate instead of scrollTrigger's onUpdate
    // });

    // images[0].onload = render;

    // function render() {
    //     context.clearRect(0, 0, canvas.width, canvas.height);
    //     context.drawImage(images[airpods.frame], 0, 0);
    // }

    let frameCount = 66,
    urls = new Array(frameCount).fill().map((o, i) => `https://cdn.shopify.com/s/files/1/0659/6080/4509/files/${(i+1).toString().padStart(4, '0')}.png?v=17144702`);
  
imageSequence({
  urls, // Array of image URLs
  canvas: "#image-sequence", // <canvas> object to draw images to
  //clear: true, // only necessary if your images contain transparency
  //onUpdate: (index, image) => console.log("drew image index", index, ", image:", image),
  scrollTrigger: {
    start: 0,   // start at the very top
    end: "max", // entire page
    scrub: true, // important!
  }
});


/*
Helper function that handles scrubbing through a sequence of images, drawing the appropriate one to the provided canvas. 
Config object properties: 
- urls [Array]: an Array of image URLs
- canvas [Canvas]: the <canvas> object to draw to
- scrollTrigger [Object]: an optional ScrollTrigger configuration object like {trigger: "#trigger", start: "top top", end: "+=1000", scrub: true, pin: true}
- clear [Boolean]: if true, it'll clear out the canvas before drawing each frame (useful if your images contain transparency)
- paused [Boolean]: true if you'd like the returned animation to be paused initially (this isn't necessary if you're passing in a ScrollTrigger that's scrubbed, but it is helpful if you just want a normal playback animation)
- fps [Number]: optional frames per second - this determines the duration of the returned animation. This doesn't matter if you're using a scrubbed ScrollTrigger. Defaults to 30fps.
- onUpdate [Function]: optional callback for when the Tween updates (probably not used very often). It'll pass two parameters: 1) the index of the image (zero-based), and 2) the Image that was drawn to the canvas

Returns a Tween instance
*/
function imageSequence(config) {
  let playhead = {frame: 0},
      canvas = gsap.utils.toArray(config.canvas)[0] || console.warn("canvas not defined"),
      ctx = canvas.getContext("2d"),
      curFrame = -1,
      onUpdate = config.onUpdate,
      images,
      updateImage = function() {
        let frame = Math.round(playhead.frame);
        if (frame !== curFrame) { // only draw if necessary
          config.clear && ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.drawImage(images[Math.round(playhead.frame)], 0, 0);
          curFrame = frame;
          onUpdate && onUpdate.call(this, frame, images[frame]);
        }
      };
  images = config.urls.map((url, i) => {
    let img = new Image();
    img.src = url;
    i || (img.onload = updateImage);
    return img;
  });
  return gsap.to(playhead, {
    frame: images.length - 1,
    ease: "none",
    onUpdate: updateImage,
    duration: images.length / (config.fps || 30),
    paused: !!config.paused,
    scrollTrigger: config.scrollTrigger
  });
}

// scroll title
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
  var titleElement = document.querySelector(".title");
  if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {
    titleElement.style.opacity = "0";
  } else {
    titleElement.style.opacity = "1";
  }
}



</script>

{% schema %}
  {
    "name": "Mulled Canvas",
    "settings": [],
    "presets": [
    {
      "name": "Mulled Canvas"
    }
  ]
  }
{% endschema %}